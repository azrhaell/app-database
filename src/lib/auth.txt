// src/lib/auth.ts
import CredentialsProvider from "next-auth/providers/credentials";
import bcrypt from "bcryptjs";
import prisma from "@/app/api/database/dbclient";
import type { NextAuthOptions } from "@auth/core/types"; // <- CORRETO para v4


export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      name: "credentials",
      credentials: {
        cpf: { label: "CPF", type: "text" },
        password: { label: "Senha", type: "password" },
      },
      async authorize(credentials) {
        if (!credentials?.cpf || !credentials?.password) return null;

        const user = await prisma.users.findUnique({
          where: { cpf: credentials.cpf },
        });

        if (!user || !user.password) return null;

        const isValid = await bcrypt.compare(credentials.password, user.password);
        if (!isValid) return null;

        return {
          id: user.idUser.toString(),
          name: user.name,
          email: user.email1,
          cpf: user.cpf,
        };
      },
    }),
  ],
  pages: {
    signIn: "/login",
  },
  session: {
    strategy: "jwt",
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.id = user.id;
        token.cpf = user.cpf;
        token.name = user.name;
      }
      return token;
    },
    async session({ session, token }) {
      if (token) {
        session.user.id = token.id;
        session.user.cpf = token.cpf;
      }
      return session;
    },
  },
  secret: process.env.NEXTAUTH_SECRET,
};
