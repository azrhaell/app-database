'use client'

import { useForm } from 'react-hook-form'
import { useState, useEffect } from 'react'
import Link from 'next/link'

export type FilterFormData = {
  limit?: number
  percoperator?: number
  numberlines?: string
  startDate?: string
  endDate?: string
  operatorname?: string
  ddd?: string
  state?: string
  companySize?: string
  legalNature?: string
  optionalsize?: 'true' | 'false'
  optionmei?: 'true' | 'false'
  rfstatus?: string
}

export default function Component_ListPercentOrganization() {
  const { register, handleSubmit } = useForm<FilterFormData>()
  const [loading, setLoading] = useState(false)
  type ResultRow = Record<string, string | number | boolean | null>;
  const [results, setResults] = useState<ResultRow[]>([])
  const [legalnatures, setLegalnatures] = useState<string[]>([]);
  const [listoperators, setListOperators] = useState<string[]>([]);
  const [liststates, setListStates] = useState<string[]>([]);
  const [listcompanysizes, setListCompanySizes] = useState<string[]>([]);
  const [listddds, setListDDDs] = useState<string[]>([]);
  const [isFetchingData, setIsFetchingData] = useState(false);

  const onSubmit = async (data: FilterFormData) => {
    setLoading(true)
    try {
      const res = await fetch('/api/stats/relative/listOrganizations/listOrganizationsPercent', {
        method: 'POST',
        body: JSON.stringify(data),
        headers: { 'Content-Type': 'application/json' }
      })

      const json = await res.json()
      setResults(json)
    } catch (error) {
      console.error('Erro ao buscar dados:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchData = async () => {
    const endpoints = [
      { url: '/api/database/getbdlegalnature', setter: setLegalnatures },
      { url: '/api/database/getbdoperator', setter: setListOperators },
      { url: '/api/database/getbdstate', setter: setListStates },
      { url: '/api/database/getbdcompanysize', setter: setListCompanySizes },
      { url: '/api/database/getbdmobilephone1', setter: setListDDDs },
    ]

    setIsFetchingData(true)
    try {
      for (const { url, setter } of endpoints) {
        const res = await fetch(url)
        if (!res.ok) throw new Error(`Erro ao buscar dados de ${url}`)
        const data = await res.json()
        setter(data)
      }
    } catch (error) {
      console.error('Erro ao buscar dados do formulário:', error)
    } finally {
      setIsFetchingData(false)
    }
  }

  useEffect(() => {
    fetchData()
  }, [])

  const updateDataForm = async () => {
    setIsFetchingData(true)
    try {
      const response = await fetch('/api/database/updatedataform', {
        method: 'POST',
      })
      if (!response.ok) throw new Error('Erro ao atualizar os campos do formulário')
      const data = await response.json()
      console.log(data.message)
      fetchData()
    } catch (error) {
      console.error('Erro ao atualizar os campos do formulário:', error)
    }
  }
  
const exportToCSV = () => {
  if (!results || results.length === 0) return;

  const headers = [
    'NUMERO',
    'OPERADORA',
    'OPERADORA_ANTERIOR',
    'INICIO_DO_CONTRATO',
    'PORTOU',
    'CNPJ',
    'RAZAO_SOCIAL',
    'CIDADE',
    'UF',
    'PORTE_EMPRESA',
    'NATUREZA_JURIDICA',
    'SIMPLES_NACIONAL',
    'MEI',
    'SITUACAO_CADASTRAL',
    'ULTIMA_ATUALIZACAO',
    'NUMERO_LINHAS',
    'BASE',    
  ];

  const csvRows = [headers.join(';')];

  results.forEach(org => {
    if (!Array.isArray(org.relatednumbers) || org.relatednumbers.length === 0) return;

    org.relatednumbers.forEach(num => {
      const row = [
        num.mobilephone1 ?? '',
        num.operatorname ?? '',
        num.previousoperator ?? '',
        num.startofcontract ?? '',
        num.ported ? 'Sim' : 'Não',
        org.cnpj ?? '',
        org.companyname ?? '',
        org.city ?? '',
        org.state ?? '',
        org.companysize ?? '',
        org.legalnature ?? '',
        org.optionalsize ? 'Sim' : 'Não',
        org.optionmei ? 'Sim' : 'Não',
        org.rfstatus ? 'Sim' : 'Não',
        org.updatedat ?? '',
        org.relatednumberscount ?? 0,
        org.mostfrequentoperator ?? '-',
      ];

      // Escape valores com ";" ou quebra de linha
      const escaped = row.map(value => {
        if (typeof value === 'string' && (value.includes(';') || value.includes('\n'))) {
          return `"${value.replace(/"/g, '""')}"`;
        }
        return value;
      });

      csvRows.push(escaped.join(';'));
    });
  });

  const blob = new Blob([`\uFEFF${csvRows.join('\n')}`], { type: 'text/csv;charset=utf-8;' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.setAttribute('download', 'resultado-consulta.csv');
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};


  return (
    <div className="p-4">
      <form onSubmit={handleSubmit(onSubmit)} className="grid grid-cols-1 md:grid-cols-3 gap-4 bg-white shadow rounded-2xl p-4">

        <div>
          <label className="block mb-1">Nº de Resultados</label>
          <select {...register('limit')} className="w-full border rounded p-2">
            <option value="">-</option>
            <option value="10">10</option>
            <option value="50">50</option>
            <option value="100">100</option>
            <option value="150">150</option>
            <option value="300">300</option>
            <option value="500">500</option>
            <option value="750">750</option>
            <option value="1000">1000</option>
          </select>
        </div>

        <div>
          <label className="block mb-1">Núm. Máx. Linhas por CNPJ</label>
          <input type="number" min='2' {...register('numberlines')} className="w-full border rounded p-2" />
        </div>

        <div>
          <label className="block mb-1">% de Base por CNPJ</label>
          <select {...register('percoperator')} className="w-full border rounded p-2">
            <option value="">-</option>
            <option value="40">40</option>
            <option value="50">50</option>
            <option value="60">60</option>
            <option value="70">70</option>
            <option value="75">75</option>
            <option value="80">80</option>
            <option value="90">90</option>
            <option value="100">100</option>
          </select>
        </div>

        <div>
          <label className="block mb-1">Data Inicial</label>
          <input type="date" {...register('startDate')} className="w-full border rounded p-2" />
        </div>

        <div>
          <label className="block mb-1">Data Final</label>
          <input type="date" {...register('endDate')} className="w-full border rounded p-2" />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700">Operadoras</label>
          <select multiple {...register('operatorname')} className="border p-2 rounded h-32" defaultValue={[""]}>
            <option value="">Todas</option>
            {[...new Set(listoperators)]
              .filter(op => isNaN(Number(op.trim()))) // Remove strings que são só números
              .map(op => (
                <option key={op} value={op}>{op}</option>
              ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700">
            <span>DDDs</span>
            <Link href={"/statistics/relative/listorganization/listpercentorganization"}>
              <span> U </span>
            </Link>
          </label>
          <select multiple {...register('ddd')} className="border p-2 rounded h-32" defaultValue={[""]}>
            <option value="">Todos</option>
            {listddds
              .filter(ddd => [21, 22, 24, 27, 28].includes(Number(ddd)))
              .map(ddd => (
                <option key={ddd} value={ddd}>{ddd}</option>
              ))}
          </select>
        </div>


        <div>
          <label className="block text-sm font-medium text-gray-700">
            <span>Estados</span>
            <Link href={"/statistics/relative/listorganization/listpercentorganization"}>
              <span> U </span>
            </Link>
          </label>
          <select multiple {...register('state')} className="border p-2 rounded h-32" defaultValue={[""]}>
            <option value="">Todos</option>
            {liststates
              .filter(uf => ['RJ', 'ES'].includes(uf.toUpperCase()))
              .map(uf => (
                <option key={uf} value={uf}>{uf.toUpperCase()}</option>
              ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700">
            <span>
              Porte da Empresa
            </span>
            <Link href={"/statistics/relative/listorganization/listpercentorganization"}>
              <span> U </span>
            </Link>
          </label>
          <select multiple {...register('companySize')} className="border p-2 rounded h-32" defaultValue={[""]}>
            <option value="" >Qualquer porte</option>
            {listcompanysizes.map(company => <option key={company} value={company}>{company}</option>)}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700">
            <span>Natureza Jurídica</span>
            <Link href={"/statistics/relative/listorganization/listpercentorganization"}>
              <span> U </span>
            </Link>
          </label>
          <select multiple {...register('legalNature')} className="border p-2 rounded h-32" defaultValue={[""]}>
            <option value="">Qualquer natureza</option>
            {legalnatures.map(nature => <option key={nature} value={nature}>{nature}</option>)}
          </select>
        </div>

        <div>
          <label className="block mb-1">Simples Nacional</label>
          <select {...register('optionalsize')} className="w-full border rounded p-2">
            <option value="">Qualquer opção</option>
            <option value="true">Sim</option>
            <option value="false">Não</option>
          </select>
        </div>

        <div>
          <label className="block mb-1">MEI</label>
          <select {...register('optionmei')} className="w-full border rounded p-2">
            <option value="">Qualquer opção</option>
            <option value="true">Sim</option>
            <option value="false">Não</option>
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700" defaultValue="">Situação Cadastral</label>
          <select {...register('rfstatus')} className="border p-2 rounded" >
            <option value="">Ativa/Inativa</option>
            <option value="ATIVA">Ativa</option>
            <option value="INATIVA">Inativa</option>
          </select>
        </div>

        <div className="md:col-span-3 text-right">
          <button
            type="submit"
            className="bg-blue-600 text-white rounded px-4 py-2 hover:bg-blue-700 disabled:opacity-50"
            disabled={loading}
          >
            {loading ? 'Pesquisando...' : 'Pesquisar'}
          </button>
        </div>

      </form>

      {isFetchingData ? (
        <button className=" bg-red-600 text-white py-2 rounded-md hover:bg-red-700 transition">
          Atualizando Formulário ...
        </button>
        ) : (
        <button onClick={updateDataForm} className=" bg-green-600 text-white py-2 rounded-md hover:bg-green-700 transition">
          Atualizar Formulário
        </button>
        )
      }

      {/* Resultados */}
      <div className="mt-6">
        {results.length > 0 ? (
          <>
          <div className="mt-4 text-right">
          <button
          onClick={exportToCSV}
          className="bg-indigo-600 text-white py-2 px-4 rounded hover:bg-indigo-700 transition"
          >
          Exportar CSV
          </button>
          </div>
          <div className="bg-white rounded shadow p-4 overflow-x-auto">
            <table className="min-w-full table-auto">
              <thead>
                <tr className="bg-gray-100">
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">CNPJ</th>
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">Nome</th>
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">Cidade</th>
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">UF</th>
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">Porte Empresa</th>
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">Natureza Jurídica</th>
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">Simples</th>
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">MEI</th>
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">Ativa</th>
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">Nº Linhas</th>
                  {/*<th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">Numeros</th>*/}
                  <th className="px-4 py-2 border text-left text-sm font-medium text-gray-700">Base</th>
                </tr>
              </thead>
              <tbody>
                {results.map((row, idx) => (
                  <tr key={idx} className="border-t">
                    <td className="px-4 py-2 text-sm text-gray-800 whitespace-nowrap">{row.cnpj || '—'}</td>
                    <td className="px-4 py-2 text-sm text-gray-800">{row.companyname || '—'}</td>
                    <td className="px-4 py-2 text-sm text-gray-800">{row.city || '—'}</td>
                    <td className="px-4 py-2 text-sm text-gray-800">{row.state || '—'}</td>
                    <td className="px-4 py-2 text-sm text-gray-800">{row.companysize || '—'}</td>
                    <td className="px-4 py-2 text-sm text-gray-800">{row.legalnature || '—'}</td>
                    <td className="px-4 py-2 text-sm text-gray-800">{row.optionalsize ? 'Sim' : 'Não'}</td>
                    <td className="px-4 py-2 text-sm text-gray-800">{row.optionmei ? 'Sim' : 'Não'}</td>
                    <td className="px-4 py-2 text-sm text-gray-800">{row.rfstatus ? 'Sim' : 'Não'}</td>
                    <td className="px-4 py-2 text-sm text-gray-800">{row.relatednumberscount  || '0'}</td>
                    {/*<td className="px-4 py-2 text-sm text-gray-800">
                      {Array.isArray(row.relatednumbers) && row.relatednumbers.length > 0
                        ? row.relatednumbers.map((item: { idNumber: string | number; mobilephone1: string; operatorname: string }) => (
                            <div key={item.idNumber}>
                              {item.mobilephone1} - {item.operatorname}
                            </div>
                          ))
                        : '0'}
                    </td>*/}
                    <td className="px-4 py-2 text-sm text-gray-800">{row.mostfrequentoperator  || '-'}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          </>
        ) : (
          !loading && <p className="text-white mt-4">Nenhum resultado encontrado.</p>
        )}
      </div>


    </div>
  )
}
