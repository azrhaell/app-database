"use client";

import { useState, useEffect } from "react";

export interface FileType {
  name: string;
  path: string | null;
  qtdregisters: number | null;
  origin: string | null;
  created: Date;
  sincronized?: boolean; // üîπ Indica se o arquivo j√° foi sincronizado
}

interface Props {
  files: {
    fileNames: FileType[];
    error?: string;
  };
}

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const Component_ListBRF = ({ files }: Props) => {
  const [fileList, setFileList] = useState<FileType[]>([]);
  const [syncStatus, setSyncStatus] = useState<{ [key: string]: string }>({});
  const [loading, setLoading] = useState<boolean>(true);

  // üîπ Busca os arquivos da API ao carregar o componente
  useEffect(() => {
    const fetchFiles = async () => {
      try {
        const response = await fetch("/api/database/getfilesbrf");
        const result = await response.json();

        if (response.ok) {
          setFileList(result.fileNames);
        } else {
          console.error("Erro ao buscar arquivos:", result.error);
        }
      } catch (error) {
        console.error("Erro na requisi√ß√£o:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchFiles();
  }, []);

  // üîπ Filtra apenas arquivos com origem "BRF"
  const filteredFiles = fileList.filter((file) => file.origin === "BRF");

  // üîπ Fun√ß√£o para sincronizar um arquivo espec√≠fico
  const handleSync = async (file: FileType) => {
    if (!file.path) {
      alert("Erro: Caminho do arquivo n√£o encontrado.");
      return;
    }

    setSyncStatus((prev) => ({ ...prev, [file.name]: "‚è≥ Sincronizando..." }));

    try {
      const response = await fetch("/api/syncBRF", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ name: file.name, path: file.path }),
      });

      const result = await response.json();

      if (response.ok) {
        setSyncStatus((prev) => ({ ...prev, [file.name]: "‚úÖ Sincronizado!" }));

        // üîπ Atualiza a lista de arquivos, marcando o arquivo como sincronizado
        setFileList((prevFiles) =>
          prevFiles.map((f) =>
            f.name === file.name ? { ...f, sincronized: true } : f
          )
        );
      } else {
        setSyncStatus((prev) => ({ ...prev, [file.name]: `‚ùå Erro: ${result.error}` }));
      }
    } catch (error) {
      console.log(error);
      setSyncStatus((prev) => ({ ...prev, [file.name]: "‚ùå Erro na sincroniza√ß√£o" }));
    }
  };

  return (
    <div>
      <h2>Arquivos da Base de Dados da Receita Federal (Origem: BRF)</h2>

      {loading ? (
        <p>üîÑ Carregando arquivos...</p>
      ) : filteredFiles.length > 0 ? (
        <ul>
          {filteredFiles.map((file, index) => (
            <li key={index} className="mb-4 border p-2 rounded">
              <strong>Nome:</strong> {file.name} <br />
              <strong>Registros:</strong> {file.qtdregisters ?? "N/A"} <br />
              <strong>Origem:</strong> {file.origin ?? "Desconhecida"} <br />
              <strong>Criado em:</strong> {new Date(file.created).toLocaleString()} <br />

              {/* Bot√£o Sincronizar */}
              <button
                  className={`mt-2 px-4 py-2 rounded ${
                    file.sincronized || syncStatus[file.name] === "‚è≥ Sincronizando..."
                      ? "bg-gray-400 cursor-not-allowed"
                      : "bg-blue-500 hover:bg-blue-600"
                  } text-white`}
                  onClick={() => handleSync(file)}
                  disabled={file.sincronized || syncStatus[file.name] === "..."}
                >
                  {syncStatus[file.name] || (file.sincronized ? "J√° sincronizado" : "Sincronizar")}
              </button>

              {/* Status da sincroniza√ß√£o */}
              {syncStatus[file.name] && <p className="mt-1 text-sm">{syncStatus[file.name]}</p>}
            </li>
          ))}
        </ul>
      ) : (
        <p>Nenhum arquivo encontrado com origem BRF.</p>
      )}
    </div>
  );
};

export default Component_ListBRF;
