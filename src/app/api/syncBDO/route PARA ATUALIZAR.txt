import { NextResponse } from "next/server";
import fs from "fs";
import path from "path";
import csvParser from "csv-parser";
import readline from "readline";
import prisma from "@/app/api/database/dbclient";

export async function POST(req: Request) {
  try {
    const { name, path: receivedPath } = await req.json();

    if (!name || !receivedPath) {
      return NextResponse.json({ error: "Nome ou caminho do arquivo inv√°lido." }, { status: 400 });
    }

    const normalizedPath = path.normalize(receivedPath.replace(/\\/g, "/"));
    const absolutePath = path.join(process.cwd(), "public", normalizedPath);

    if (!fs.existsSync(absolutePath)) {
      return NextResponse.json({ error: "Arquivo n√£o encontrado no sistema." }, { status: 404 });
    }

    const file = await prisma.listfiles.findFirst({
      where: { name, origin: "BDO", sincronized: false },
    });

    if (!file) {
      return NextResponse.json({ error: "Arquivo j√° sincronizado ou n√£o cadastrado." }, { status: 404 });
    }

    // üîπ Detecta o delimitador do CSV
    const detectDelimiter = async (filePath: string): Promise<string> => {
      const fileStream = fs.createReadStream(filePath);
      const rl = readline.createInterface({ input: fileStream, crlfDelay: Infinity });

      for await (const line of rl) {
        if (line.includes(";")) return ";";
        if (line.includes(",")) return ",";
        break;
      }

      return ";";
    };

    const delimiter = await detectDelimiter(absolutePath);
    console.log(`üìå Delimitador detectado: "${delimiter}"`);

    // üîπ Filtragem dos registros pelos DDDs permitidos
    const dddsPermitidos = ["21", "22", "24", "27", "28"];

    // üîπ Criando novo arquivo apenas com os DDDs permitidos
    const filteredFilePath = absolutePath.replace(".csv", "_filtered.csv");
    const writeStream = fs.createWriteStream(filteredFilePath);
    writeStream.write("number,operadora,datahora\n");

    const records: { number: string; datahora: string; operadora: string }[] = await new Promise((resolve, reject) => {
      const results: { number: string; datahora: string; operadora: string }[] = [];
      let isHeaderChecked = false;

      fs.createReadStream(absolutePath)
        .pipe(csvParser({ separator: delimiter }))
        .on("data", (data) => {
          if (!isHeaderChecked) {
            const requiredFields = ["number", "operadora", "datahora"];
            const headers = Object.keys(data);
            const hasAllFields = requiredFields.every(field => headers.includes(field));

            if (!hasAllFields) {
              reject(new Error("Cabe√ßalho inv√°lido no arquivo CSV."));
              return;
            }
            isHeaderChecked = true;
          }

          if (data.number && data.datahora && data.operadora) {
            const ddd = data.number.replace(/\D/g, "").slice(0, 2);
            if (dddsPermitidos.includes(ddd)) {
              const cleanedNumber = data.number.replace(/\D/g, "");
              results.push({
                number: cleanedNumber,
                datahora: data.datahora,
                operadora: data.operadora,
              });
              writeStream.write(`${cleanedNumber},${data.operadora},${data.datahora}\n`);
            }
          }
        })
        .on("end", () => {
          writeStream.end();
          resolve(results);
        })
        .on("error", (error) => reject(error));
    });

    if (records.length === 0) {
      return NextResponse.json({ error: "Nenhum dado v√°lido encontrado no arquivo." }, { status: 400 });
    }

    console.log(`üîÑ Comparando ${records.length} registros com a base de dados...`);

    const batchSize = 10000;
    const datahoraDate = (dh: string) => new Date(dh);

    for (let i = 0; i < records.length; i += batchSize) {
      const batch = records.slice(i, i + batchSize);

      const numbers = batch.map(r => r.number);
      const existingOrgs = await prisma.organizations.findMany({
        where: {
          mobilephone1: { in: numbers },
        },
        select: {
          id: true,
          cnpj: true,
          mobilephone1: true,
          startofcontract: true,
          operatorname: true,
        },
      });

      const updates = [];
      const portedRecords = [];

      for (const record of batch) {
        const match = existingOrgs.find(org => org.mobilephone1 === record.number);
        if (!match) continue;

        const newDate = datahoraDate(record.datahora);
        if (match.startofcontract >= newDate) continue;

        updates.push(
          prisma.organizations.update({
            where: { id: match.id },
            data: {
              startofcontract: newDate,
              operatorname: record.operadora,
              ported: true,
            },
          })
        );

        portedRecords.push({
          cnpj: match.cnpj,
          mobilephone1: match.mobilephone1,
          porteddate: newDate,
          actualoperator: record.operadora,
          previousoperator: match.operatorname,
        });
      }

      await prisma.$transaction([
        ...updates,
        ...portedRecords.map((pr) =>
          prisma.portedslist.create({
            data: pr,
          })
        ),
      ]);

      console.log(`‚úÖ Atualizados ${updates.length} registros (${i + batch.length}/${records.length})`);
    }

    await prisma.listfiles.update({
      where: { idFile: file.idFile },
      data: { sincronized: true },
    });

    return NextResponse.json({
      message: `Sincroniza√ß√£o conclu√≠da. ${records.length} registros processados.`,
      filteredFilePath,
    });
  } catch (error) {
    console.error("‚ùå Erro na sincroniza√ß√£o:", error);
    return NextResponse.json({ error: "Erro ao processar a sincroniza√ß√£o." }, { status: 500 });
  }
}
