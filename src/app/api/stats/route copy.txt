import { NextResponse } from 'next/server';
import prisma from '../database/dbclient';

export async function GET() {
  try {
    const [
      uniqueCNPJs,
      uniquePhones,
      cnpjsByState,
      phonesByState,
      phonesByOperator,
      phonesByCNPJ,
      operatorsByStateRaw,
      phonesByOperatorStateRaw,
    ] = await Promise.all([
      prisma.organizations.groupBy({ by: ['cnpj'] }),
      prisma.organizations.groupBy({ by: ['mobilephone1'] }),
      prisma.organizations.groupBy({
        by: ['state'],
        _count: { cnpj: true },
        where: { cnpj: { not: '' } },
      }),
      prisma.organizations.groupBy({
        by: ['state'],
        _count: { mobilephone1: true },
      }),
      prisma.organizations.groupBy({
        by: ['operatorname'],
        _count: { mobilephone1: true },
      }),
      prisma.organizations.groupBy({
        by: ['cnpj'],
        _count: { mobilephone1: true },
      }),
      prisma.organizations.groupBy({
        by: ['state', 'operatorname'],
        where: { operatorname: { not: '' } },
      }),
      prisma.organizations.groupBy({
        by: ['state', 'operatorname'],
        _count: { mobilephone1: true },
      })
    ]);

    // Determinar a maior operadora por estado
    const maxOperatorByStateMap = phonesByOperatorStateRaw.reduce((acc, { state, operatorname, _count }) => {
      if (!acc[state] || _count.mobilephone1 > acc[state]._count.mobilephone1) {
        acc[state] = { state, operatorname, _count };
      }
      return acc;
    }, {} as Record<string, { state: string; operatorname: string; _count: { mobilephone1: number } }>);

    const maxOperatorByState = Object.values(maxOperatorByStateMap).map(({ state, operatorname }) => ({
      state,
      operatorname,
    }));

    // Agrupar operadores únicos por estado
    const operatorsByStateCount = operatorsByStateRaw.reduce((acc, { state }) => {
      acc[state] = (acc[state] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    // Transformar o objeto em array
    const operatorsByState = Object.entries(operatorsByStateCount).map(([state, count]) => ({
      state,
      count,
    }));

    // Encontrar a operadora com mais linhas no total
    const maxPhonesByOperator = phonesByOperator.reduce((max, item) => {
      return item._count.mobilephone1 > (max?._count.mobilephone1 || 0) ? item : max;
    }, null as { operatorname: string | null; _count: { mobilephone1: number } } | null);

    // Encontrar o CNPJ com mais linhas
    const maxPhonesByCNPJ = phonesByCNPJ.reduce((max, item) => {
      return item._count.mobilephone1 > (max?._count.mobilephone1 || 0) ? item : max;
    }, null as { cnpj: string; _count: { mobilephone1: number } } | null);

    return NextResponse.json({
      uniqueCNPJs: uniqueCNPJs.length,
      uniquePhones: uniquePhones.length,
      cnpjsByState: cnpjsByState.map(({ state, _count }) => ({
        state,
        count: _count.cnpj,
      })),
      phonesByState: phonesByState.map(({ state, _count }) => ({
        state,
        count: _count.mobilephone1,
      })),
      phonesByOperator: phonesByOperator.map(({ operatorname, _count }) => ({
        operatorname,
        count: _count.mobilephone1,
      })),
      operatorsByState,
      maxOperatorByState,
      maxPhonesByOperator: maxPhonesByOperator
        ? { operatorname: maxPhonesByOperator.operatorname, count: maxPhonesByOperator._count.mobilephone1 }
        : null,
      maxPhonesByCNPJ: maxPhonesByCNPJ
        ? { cnpj: maxPhonesByCNPJ.cnpj, count: maxPhonesByCNPJ._count.mobilephone1 }
        : null,
    });
  } catch (error) {
    console.error(error);
    return NextResponse.json({ error: 'Erro ao buscar estatísticas' }, { status: 500 });
  }
}
